{
  "openapi": "3.1.0",
  "info": {
    "title": "My awesome API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "post",
      "description": "Post operations"
    },
    {
      "name": "account",
      "description": "Account operations"
    },
    {
      "name": "session",
      "description": "Session operations"
    },
    {
      "name": "user",
      "description": "Operations for managing users"
    },
    {
      "name": "verificationToken",
      "description": "VerificationToken operations"
    }
  ],
  "paths": {
    "/post": {
      "get": {
        "operationId": "list-Post",
        "description": "List \"Post\" resources",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[createdAt]",
            "required": false,
            "description": "Equality filter for \"createdAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[createdAt$lt]",
            "required": false,
            "description": "Less-than filter for \"createdAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[createdAt$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"createdAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[createdAt$gt]",
            "required": false,
            "description": "Greater-than filter for \"createdAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[createdAt$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"createdAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[updatedAt]",
            "required": false,
            "description": "Equality filter for \"updatedAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[updatedAt$lt]",
            "required": false,
            "description": "Less-than filter for \"updatedAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[updatedAt$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"updatedAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[updatedAt$gt]",
            "required": false,
            "description": "Greater-than filter for \"updatedAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[updatedAt$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"updatedAt\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[published]",
            "required": false,
            "description": "Equality filter for \"published\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter[createdBy]",
            "required": false,
            "description": "Equality filter for \"createdBy\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Post",
        "description": "Create a \"Post\" resource",
        "tags": [
          "post"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post/{id}": {
      "get": {
        "operationId": "fetch-Post",
        "description": "Fetch a \"Post\" resource",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Post-put",
        "description": "Update a \"Post\" resource",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Post-patch",
        "description": "Update a \"Post\" resource",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-Post",
        "description": "Delete a \"Post\" resource",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post/{id}/createdBy": {
      "get": {
        "operationId": "fetch-Post-related-createdBy",
        "description": "Fetch the related \"createdBy\" resource for \"Post\"",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/post/{id}/relationships/createdBy": {
      "get": {
        "operationId": "fetch-Post-relationship-createdBy",
        "description": "Fetch the \"createdBy\" relationships for a \"Post\"",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Post-relationship-createdBy-put",
        "description": "Update \"createdBy\" relationship for a \"Post\"",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Post-relationship-createdBy-patch",
        "description": "Update \"createdBy\" relationship for a \"Post\"",
        "tags": [
          "post"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "operationId": "list-Account",
        "description": "List \"Account\" resources",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "required": false,
            "description": "Equality filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type$contains]",
            "required": false,
            "description": "String contains filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type$search]",
            "required": false,
            "description": "String full-text search filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider]",
            "required": false,
            "description": "Equality filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider$contains]",
            "required": false,
            "description": "String contains filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider$search]",
            "required": false,
            "description": "String full-text search filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[provider$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"provider\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId]",
            "required": false,
            "description": "Equality filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId$contains]",
            "required": false,
            "description": "String contains filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId$search]",
            "required": false,
            "description": "String full-text search filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[providerAccountId$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"providerAccountId\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token]",
            "required": false,
            "description": "Equality filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token$contains]",
            "required": false,
            "description": "String contains filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token$search]",
            "required": false,
            "description": "String full-text search filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[refresh_token$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"refresh_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token]",
            "required": false,
            "description": "Equality filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token$contains]",
            "required": false,
            "description": "String contains filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token$search]",
            "required": false,
            "description": "String full-text search filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[access_token$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"access_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[expires_at]",
            "required": false,
            "description": "Equality filter for \"expires_at\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[expires_at$lt]",
            "required": false,
            "description": "Less-than filter for \"expires_at\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[expires_at$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"expires_at\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[expires_at$gt]",
            "required": false,
            "description": "Greater-than filter for \"expires_at\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[expires_at$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"expires_at\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[token_type]",
            "required": false,
            "description": "Equality filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[token_type$contains]",
            "required": false,
            "description": "String contains filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[token_type$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[token_type$search]",
            "required": false,
            "description": "String full-text search filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[token_type$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[token_type$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"token_type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope]",
            "required": false,
            "description": "Equality filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope$contains]",
            "required": false,
            "description": "String contains filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope$search]",
            "required": false,
            "description": "String full-text search filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[scope$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"scope\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token]",
            "required": false,
            "description": "Equality filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token$contains]",
            "required": false,
            "description": "String contains filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token$search]",
            "required": false,
            "description": "String full-text search filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id_token$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"id_token\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state]",
            "required": false,
            "description": "Equality filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state$contains]",
            "required": false,
            "description": "String contains filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state$search]",
            "required": false,
            "description": "String full-text search filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[session_state$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"session_state\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Account",
        "description": "Create a \"Account\" resource",
        "tags": [
          "account"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/{id}": {
      "get": {
        "operationId": "fetch-Account",
        "description": "Fetch a \"Account\" resource",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Account-put",
        "description": "Update a \"Account\" resource",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Account-patch",
        "description": "Update a \"Account\" resource",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-Account",
        "description": "Delete a \"Account\" resource",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/account/{id}/user": {
      "get": {
        "operationId": "fetch-Account-related-user",
        "description": "Fetch the related \"user\" resource for \"Account\"",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/account/{id}/relationships/user": {
      "get": {
        "operationId": "fetch-Account-relationship-user",
        "description": "Fetch the \"user\" relationships for a \"Account\"",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Account-relationship-user-put",
        "description": "Update \"user\" relationship for a \"Account\"",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Account-relationship-user-patch",
        "description": "Update \"user\" relationship for a \"Account\"",
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/session": {
      "get": {
        "operationId": "list-Session",
        "description": "List \"Session\" resources",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken]",
            "required": false,
            "description": "Equality filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken$contains]",
            "required": false,
            "description": "String contains filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken$search]",
            "required": false,
            "description": "String full-text search filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[sessionToken$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"sessionToken\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[expires]",
            "required": false,
            "description": "Equality filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$lt]",
            "required": false,
            "description": "Less-than filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$gt]",
            "required": false,
            "description": "Greater-than filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Session",
        "description": "Create a \"Session\" resource",
        "tags": [
          "session"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/session/{id}": {
      "get": {
        "operationId": "fetch-Session",
        "description": "Fetch a \"Session\" resource",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Session-put",
        "description": "Update a \"Session\" resource",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Session-patch",
        "description": "Update a \"Session\" resource",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-Session",
        "description": "Delete a \"Session\" resource",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/session/{id}/user": {
      "get": {
        "operationId": "fetch-Session-related-user",
        "description": "Fetch the related \"user\" resource for \"Session\"",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/session/{id}/relationships/user": {
      "get": {
        "operationId": "fetch-Session-relationship-user",
        "description": "Fetch the \"user\" relationships for a \"Session\"",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Session-relationship-user-put",
        "description": "Update \"user\" relationship for a \"Session\"",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Session-relationship-user-patch",
        "description": "Update \"user\" relationship for a \"Session\"",
        "tags": [
          "session"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "operationId": "list-User",
        "description": "List \"User\" resources",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "operationId": "create-User",
        "description": "Create a \"User\" resource",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}": {
      "get": {
        "operationId": "fetch-User",
        "description": "Fetch a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "operationId": "update-User-put",
        "description": "Update a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "patch": {
        "operationId": "update-User-patch",
        "description": "Update a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "delete": {
        "operationId": "delete-User",
        "description": "Delete a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/accounts": {
      "get": {
        "operationId": "fetch-User-related-accounts",
        "description": "Fetch the related \"accounts\" resource for \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/relationships/accounts": {
      "get": {
        "operationId": "fetch-User-relationship-accounts",
        "description": "Fetch the \"accounts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "operationId": "update-User-relationship-accounts-put",
        "description": "Update \"accounts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "patch": {
        "operationId": "update-User-relationship-accounts-patch",
        "description": "Update \"accounts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "operationId": "create-User-relationship-accounts",
        "description": "Create new \"accounts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/sessions": {
      "get": {
        "operationId": "fetch-User-related-sessions",
        "description": "Fetch the related \"sessions\" resource for \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/relationships/sessions": {
      "get": {
        "operationId": "fetch-User-relationship-sessions",
        "description": "Fetch the \"sessions\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "operationId": "update-User-relationship-sessions-put",
        "description": "Update \"sessions\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "patch": {
        "operationId": "update-User-relationship-sessions-patch",
        "description": "Update \"sessions\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "operationId": "create-User-relationship-sessions",
        "description": "Create new \"sessions\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/posts": {
      "get": {
        "operationId": "fetch-User-related-posts",
        "description": "Fetch the related \"posts\" resource for \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/PostListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/user/{id}/relationships/posts": {
      "get": {
        "operationId": "fetch-User-relationship-posts",
        "description": "Fetch the \"posts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[emailVerified]",
            "required": false,
            "description": "Equality filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lt]",
            "required": false,
            "description": "Less-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gt]",
            "required": false,
            "description": "Greater-than filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[emailVerified$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"emailVerified\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[password]",
            "required": false,
            "description": "Equality filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$contains]",
            "required": false,
            "description": "String contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$search]",
            "required": false,
            "description": "String full-text search filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[password$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"password\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image]",
            "required": false,
            "description": "Equality filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$contains]",
            "required": false,
            "description": "String contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$search]",
            "required": false,
            "description": "String full-text search filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[image$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"image\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[accounts]",
            "required": false,
            "description": "Equality filter for \"accounts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[sessions]",
            "required": false,
            "description": "Equality filter for \"sessions\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[posts]",
            "required": false,
            "description": "Equality filter for \"posts\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "put": {
        "operationId": "update-User-relationship-posts-put",
        "description": "Update \"posts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "patch": {
        "operationId": "update-User-relationship-posts-patch",
        "description": "Update \"posts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      },
      "post": {
        "operationId": "create-User-relationship-posts",
        "description": "Create new \"posts\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/verificationToken": {
      "get": {
        "operationId": "list-VerificationToken",
        "description": "List \"VerificationToken\" resources",
        "tags": [
          "verificationToken"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[identifier]",
            "required": false,
            "description": "Equality filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[identifier$contains]",
            "required": false,
            "description": "String contains filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[identifier$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[identifier$search]",
            "required": false,
            "description": "String full-text search filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[identifier$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[identifier$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"identifier\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[expires]",
            "required": false,
            "description": "Equality filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$lt]",
            "required": false,
            "description": "Less-than filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$gt]",
            "required": false,
            "description": "Greater-than filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[expires$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"expires\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationTokenListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-VerificationToken",
        "description": "Create a \"VerificationToken\" resource",
        "tags": [
          "verificationToken"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationTokenCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/verificationToken/{id}": {
      "get": {
        "operationId": "fetch-VerificationToken",
        "description": "Fetch a \"VerificationToken\" resource",
        "tags": [
          "verificationToken"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-VerificationToken-put",
        "description": "Update a \"VerificationToken\" resource",
        "tags": [
          "verificationToken"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationTokenUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-VerificationToken-patch",
        "description": "Update a \"VerificationToken\" resource",
        "tags": [
          "verificationToken"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationTokenUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationTokenResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-VerificationToken",
        "description": "Delete a \"VerificationToken\" resource",
        "tags": [
          "verificationToken"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "_jsonapi": {
        "type": "object",
        "description": "An object describing the server’s implementation",
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "_meta": {
        "type": "object",
        "description": "Meta information about the request or response",
        "properties": {
          "serialization": {
            "description": "Superjson serialization metadata"
          }
        },
        "additionalProperties": true
      },
      "_resourceIdentifier": {
        "type": "object",
        "description": "Identifier for a resource",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Resource type"
          },
          "id": {
            "type": "string",
            "description": "Resource id"
          }
        }
      },
      "_resource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_resourceIdentifier"
          },
          {
            "type": "object",
            "description": "A resource with attributes and relationships",
            "properties": {
              "attributes": {
                "type": "object",
                "description": "Resource attributes"
              },
              "relationships": {
                "type": "object",
                "description": "Resource relationships"
              }
            }
          }
        ]
      },
      "_links": {
        "type": "object",
        "required": [
          "self"
        ],
        "description": "Links related to the resource",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link for refetching the curent results"
          }
        }
      },
      "_pagination": {
        "type": "object",
        "description": "Pagination information",
        "required": [
          "first",
          "last",
          "prev",
          "next"
        ],
        "properties": {
          "first": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "description": "Link to the first page"
              }
            ]
          },
          "last": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "description": "Link to the last page"
              }
            ]
          },
          "prev": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "description": "Link to the previous page"
              }
            ]
          },
          "next": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string",
                "description": "Link to the next page"
              }
            ]
          }
        }
      },
      "_errors": {
        "type": "array",
        "description": "An array of error objects",
        "items": {
          "type": "object",
          "required": [
            "status",
            "code"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "HTTP status"
            },
            "code": {
              "type": "string",
              "description": "Error code"
            },
            "prismaCode": {
              "type": "string",
              "description": "Prisma error code if the error is thrown by Prisma"
            },
            "title": {
              "type": "string",
              "description": "Error title"
            },
            "detail": {
              "type": "string",
              "description": "Error detail"
            },
            "reason": {
              "type": "string",
              "description": "Detailed error reason"
            },
            "zodErrors": {
              "type": "object",
              "additionalProperties": true,
              "description": "Zod validation errors if the error is due to data validation failure"
            }
          }
        }
      },
      "_errorResponse": {
        "type": "object",
        "required": [
          "errors"
        ],
        "description": "An error response",
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "errors": {
            "$ref": "#/components/schemas/_errors"
          }
        }
      },
      "_relationLinks": {
        "type": "object",
        "required": [
          "self",
          "related"
        ],
        "description": "Links related to a relationship",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link for fetching this relationship"
          },
          "related": {
            "type": "string",
            "description": "Link for fetching the resource represented by this relationship"
          }
        }
      },
      "_toOneRelationship": {
        "type": "object",
        "description": "A to-one relationship",
        "properties": {
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/_resourceIdentifier"
              }
            ]
          }
        }
      },
      "_toOneRelationshipWithLinks": {
        "type": "object",
        "required": [
          "links",
          "data"
        ],
        "description": "A to-one relationship with links",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/_relationLinks"
          },
          "data": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/_resourceIdentifier"
              }
            ]
          }
        }
      },
      "_toManyRelationship": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "A to-many relationship",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_toManyRelationshipWithLinks": {
        "type": "object",
        "required": [
          "links",
          "data"
        ],
        "description": "A to-many relationship with links",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/_pagedRelationLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_pagedRelationLinks": {
        "description": "Relationship links with pagination information",
        "allOf": [
          {
            "$ref": "#/components/schemas/_pagination"
          },
          {
            "$ref": "#/components/schemas/_relationLinks"
          }
        ]
      },
      "_toManyRelationshipRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Input for manipulating a to-many relationship",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_toOneRelationshipRequest": {
        "description": "Input for manipulating a to-one relationship",
        "oneOf": [
          {
            "type": "null"
          },
          {
            "type": "object",
            "required": [
              "data"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/_resourceIdentifier"
              }
            }
          }
        ]
      },
      "_toManyRelationshipResponse": {
        "description": "Response for a to-many relationship",
        "allOf": [
          {
            "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
          },
          {
            "type": "object",
            "properties": {
              "jsonapi": {
                "$ref": "#/components/schemas/_jsonapi"
              }
            }
          }
        ]
      },
      "_toOneRelationshipResponse": {
        "description": "Response for a to-one relationship",
        "allOf": [
          {
            "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
          },
          {
            "type": "object",
            "properties": {
              "jsonapi": {
                "$ref": "#/components/schemas/_jsonapi"
              }
            }
          }
        ]
      },
      "Post": {
        "type": "object",
        "description": "The \"Post\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "published": {
                "type": "boolean"
              },
              "createdById": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "createdBy": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              }
            }
          }
        }
      },
      "PostCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"Post\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Post\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "name",
                  "updatedAt",
                  "createdById"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "published": {
                    "type": "boolean"
                  },
                  "createdById": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "createdBy": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "PostUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"Post\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Post\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "published": {
                    "type": "boolean"
                  },
                  "createdById": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "createdBy": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "PostResponse": {
        "type": "object",
        "description": "Response for a \"Post\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Post"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "createdBy": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "PostListResponse": {
        "type": "object",
        "description": "Response for a list of \"Post\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Post"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "createdBy": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "Account": {
        "type": "object",
        "description": "The \"Account\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "provider": {
                "type": "string"
              },
              "providerAccountId": {
                "type": "string"
              },
              "refresh_token": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "access_token": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "expires_at": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "token_type": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "scope": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "id_token": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "session_state": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              }
            }
          }
        }
      },
      "AccountCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"Account\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Account\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "userId",
                  "type",
                  "provider",
                  "providerAccountId"
                ],
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "providerAccountId": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "access_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "expires_at": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "token_type": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "scope": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "id_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "session_state": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "AccountUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"Account\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Account\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "providerAccountId": {
                    "type": "string"
                  },
                  "refresh_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "access_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "expires_at": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "token_type": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "scope": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "id_token": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "session_state": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "AccountResponse": {
        "type": "object",
        "description": "Response for a \"Account\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Account"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "AccountListResponse": {
        "type": "object",
        "description": "Response for a list of \"Account\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Account"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "Session": {
        "type": "object",
        "description": "The \"Session\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "sessionToken": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "expires": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              }
            }
          }
        }
      },
      "SessionCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"Session\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Session\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "sessionToken",
                  "userId",
                  "expires"
                ],
                "properties": {
                  "sessionToken": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "SessionUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"Session\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Session\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "sessionToken": {
                    "type": "string"
                  },
                  "userId": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "SessionResponse": {
        "type": "object",
        "description": "Response for a \"Session\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Session"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "SessionListResponse": {
        "type": "object",
        "description": "Response for a list of \"Session\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Session"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "User": {
        "type": "object",
        "description": "The \"User\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "name": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "email": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "emailVerified": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "format": "date-time"
                  }
                ]
              },
              "password": {
                "type": "string"
              },
              "image": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "accounts": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              },
              "sessions": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              },
              "posts": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              }
            }
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"User\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "password"
                ],
                "properties": {
                  "name": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "email": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "emailVerified": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "format": "date-time"
                      }
                    ]
                  },
                  "password": {
                    "type": "string"
                  },
                  "image": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "accounts": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "sessions": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "posts": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"User\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "email": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "emailVerified": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string",
                        "format": "date-time"
                      }
                    ]
                  },
                  "password": {
                    "type": "string"
                  },
                  "image": {
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "accounts": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "sessions": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "posts": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "description": "Response for a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "accounts": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      },
                      "sessions": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      },
                      "posts": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "description": "Response for a list of \"User\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "accounts": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        },
                        "sessions": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        },
                        "posts": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "VerificationToken": {
        "type": "object",
        "description": "The \"VerificationToken\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "identifier": {
                "type": "string"
              },
              "expires": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "VerificationTokenCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"VerificationToken\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"VerificationToken\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "identifier",
                  "expires"
                ],
                "properties": {
                  "identifier": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "VerificationTokenUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"VerificationToken\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"VerificationToken\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "identifier": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "VerificationTokenResponse": {
        "type": "object",
        "description": "Response for a \"VerificationToken\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VerificationToken"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "VerificationTokenListResponse": {
        "type": "object",
        "description": "Response for a list of \"VerificationToken\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VerificationToken"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "description": "The resource id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "include": {
        "name": "include",
        "in": "query",
        "description": "Relationships to include",
        "required": false,
        "style": "form",
        "schema": {
          "type": "string"
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Fields to sort by",
        "required": false,
        "style": "form",
        "schema": {
          "type": "string"
        }
      },
      "page-offset": {
        "name": "page[offset]",
        "in": "query",
        "description": "Offset for pagination",
        "required": false,
        "style": "form",
        "schema": {
          "type": "integer"
        }
      },
      "page-limit": {
        "name": "page[limit]",
        "in": "query",
        "description": "Limit for pagination",
        "required": false,
        "style": "form",
        "schema": {
          "type": "integer"
        }
      }
    }
  }
}